volumes:
  productdb_data:
  basketdb_data:
  customerdb_data:
  orderdb_data:
  paymentdb_data:

services:
  read:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=read"
    ports:
      - 3101:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks: &loki-dns
      ael:
        aliases:
          - loki

  write:
    image: grafana/loki:latest
    command: "-config.file=/etc/loki/config.yaml -target=write"
    ports:
      - 3102:3100
      - 7946
      - 9095
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    depends_on:
      - minio
    networks:
      <<: *loki-dns

  alloy:
    image: grafana/alloy:latest
    volumes:
      - ../observability/alloy/alloy-local-config.yaml:/etc/alloy/config.alloy:ro
      - /var/run/docker.sock:/var/run/docker.sock
    command: run --server.http.listen-addr=0.0.0.0:12345 --storage.path=/var/lib/alloy/data /etc/alloy/config.alloy
    ports:
      - 12345:12345
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service


  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        minio server /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - ./.data/minio:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  grafana:
    image: grafana/grafana:latest
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    depends_on:
      - gateway
    entrypoint:
      - sh
      - -euc
      - |
        /run.sh
    ports:
      - "3000:3000"
    volumes:
      - ../observability/grafana/datasource.yml:/etc/grafana/provisioning/datasources/datasource.yml
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  backend:
    image: grafana/loki:latest
    volumes:
      - ../observability/loki/loki-config.yaml:/etc/loki/config.yaml
    ports:
      - "3100"
      - "7946"
    command: "-config.file=/etc/loki/config.yaml -target=backend -legacy-read-mode=false"
    depends_on:
      - gateway
    extends:
      file: common-config.yml
      service: network-deploy-service


  gateway:
    image: nginx:latest
    depends_on:
      - read
      - write
    entrypoint:
      - sh
      - -euc
      - |
        cat <<EOF > /etc/nginx/nginx.conf
        user  nginx;
        worker_processes  5;  ## Default: 1
        
        events {
          worker_connections   1000;
        }
        
        http {
          resolver 127.0.0.11;
        
          server {
            listen             3100;
        
            location = / {
              return 200 'OK';
              auth_basic off;
            }
        
            location = /api/prom/push {
              proxy_pass       http://write:3100\$$request_uri;
            }
        
            location = /api/prom/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }
        
            location ~ /api/prom/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
        
            location = /loki/api/v1/push {
              proxy_pass       http://write:3100\$$request_uri;
            }
        
            location = /loki/api/v1/tail {
              proxy_pass       http://read:3100\$$request_uri;
              proxy_set_header Upgrade \$$http_upgrade;
              proxy_set_header Connection "upgrade";
            }
        
            location ~ /loki/api/.* {
              proxy_pass       http://read:3100\$$request_uri;
            }
          }
        }
        EOF
        /docker-entrypoint.sh nginx -g "daemon off;"
    ports:
      - "3100:3100"
    healthcheck:
      test: [ "CMD", "service", "nginx", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    extends:
      file: common-config.yml
      service: network-deploy-service

  prometheus:
    image: prom/prometheus:v3.1.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extends:
      file: common-config.yml
      service: network-deploy-service




  configserver:
    image: "tarikhamarat/configserver:s19"
    container_name: configserver-ms
    ports:
      - "8071:8071"
    healthcheck:
      test: "wget -q --spider http://localhost:8071/actuator/health/readiness || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config

  eurekaserver:
    image: "tarikhamarat/eurekaserver:s19"
    container_name: eurekaserver-ms
    ports:
      - "8070:8070"
    depends_on:
      configserver:
        condition: service_healthy
    healthcheck:
      test: "wget -q --spider http://localhost:8070/actuator/health/readiness || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-configserver-config
    environment:
      SPRING_APPLICATION_NAME: "eurekaserver"


  authservice:
    image: "tarikhamarat/authservice:s19"
    container_name: authservice-ms
    ports:
      - "8099:8099"
    healthcheck:
      test: "wget -q --spider http://localhost:8099/actuator/health/readiness || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "authservice"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  basketservice:
    image: "tarikhamarat/basketservice:s19"
    container_name: basketservice-ms
    ports:
      - "8040:8040"
    healthcheck:
      test: "wget -q --spider http://localhost:8040/actuator/health/readiness || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    depends_on:
      basketdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "basketservice"
      SPRING_DATASOURCE_URL: "jdbc:mysql://basketdb:3306/basketservicedb"
      SPRING_RABBITMQ_HOST: "rabbitmq"  # Konteynır adı
      SPRING_RABBITMQ_PORT: "5672"
      SPRING_RABBITMQ_USERNAME: "guest"
      SPRING_RABBITMQ_PASSWORD: "guest"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  customerservice:
    image: tarikhamarat/customerservice:s19
    container_name: customerservice-ms
    ports:
      - "8078:8078"
    depends_on:
      customerdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: "wget -q --spider http://localhost:8078/actuator/health/readiness || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "customerservice"
      SPRING_DATASOURCE_URL: "jdbc:mysql://customerdb:3306/customerservicedb"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  orderservice:
    image: "tarikhamarat/orderservice:s19"
    container_name: orderservice-ms
    ports:
      - "8085:8085"
    depends_on:
      orderdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: "wget -q --spider http://localhost:8085/actuator/health/readiness || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "orderservice"
      SPRING_DATASOURCE_URL: "jdbc:mysql://orderdb:3306/orderservicedb"
      SPRING_RABBITMQ_HOST: "rabbitmq"
      SPRING_RABBITMQ_PORT: "5672"
      SPRING_RABBITMQ_USERNAME: "guest"
      SPRING_RABBITMQ_PASSWORD: "guest"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  paymentservice:
    image: "tarikhamarat/paymentservice:s19"
    container_name: paymentservice-ms
    ports:
      - "8086:8086"
    depends_on:
      paymentdb:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    healthcheck:
      test: "wget -q --spider http://localhost:8086/actuator/health/readiness || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    environment:
      SPRING_APPLICATION_NAME: "paymentservice"
      SPRING_DATASOURCE_URL: "jdbc:mysql://paymentdb:3306/paymentservicedb"
      SPRING_RABBITMQ_HOST: "rabbitmq"
      SPRING_RABBITMQ_PORT: "5672"
      SPRING_RABBITMQ_USERNAME: "guest"
      SPRING_RABBITMQ_PASSWORD: "guest"
    extends:
      file: common-config.yml
      service: microservice-eureka-config

  productservice:
    image: tarikhamarat/productservice:s19
    container_name: productservice-ms
    ports:
      - "8088:8088"
    healthcheck:
      test: "wget -q --spider http://localhost:8088/actuator/health/readiness || exit 1"
      interval: 10s
      timeout: 5s
      retries: 10
      start_period: 10s
    depends_on:
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
    environment:
      SPRING_APPLICATION_NAME: "productservice"
      SPRING_DATASOURCE_URL: "jdbc:mysql://productdb:3306/productservicedb"
    extends:
      file: common-config.yml
      service: microservice-eureka-config


  productdb:
    image: mysql:8.0
    container_name: productdb
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: productservicedb
    ports:
      - "3301:3306"
    volumes:
      - productdb_data:/var/lib/mysql
    networks:
      - ael
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot" ]
      interval: 10s
      timeout: 5s
      retries: 5

  basketdb:
    image: mysql:8.0
    container_name: basketdb
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: basketservicedb
    ports:
      - "3309:3306"
    volumes:
      - basketdb_data:/var/lib/mysql
    networks:
      - ael
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot" ]
      interval: 10s
      timeout: 5s
      retries: 5

  customerdb:
    image: mysql:8.0
    container_name: customerdb
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: customerservicedb
    ports:
      - "3307:3306"
    volumes:
      - customerdb_data:/var/lib/mysql
    networks:
      - ael
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot" ]
      interval: 10s
      timeout: 5s
      retries: 5

  orderdb:
    image: mysql:8.0
    container_name: orderdb
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: orderservicedb
    ports:
      - "3304:3306"
    volumes:
      - orderdb_data:/var/lib/mysql
    networks:
      - ael
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot" ]
      interval: 10s
      timeout: 5s
      retries: 5

  paymentdb:
    image: mysql:8.0
    container_name: paymentdb
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: paymentservicedb
    ports:
      - "3305:3306"
    volumes:
      - paymentdb_data:/var/lib/mysql
    networks:
      - ael
    healthcheck:
      test: [ "CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-proot" ]
      interval: 10s
      timeout: 5s
      retries: 5


  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    ports:
      - "5672:5672"     # AMQP protokolü için
      - "15672:15672"   # Yönetim konsolu için
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - ael








  gatewayserver:
    image: tarikhamarat/gatewayserver:s19
    container_name: gatewayserver-ms
    ports:
      - "8072:8072"
    environment:
      SPRING_APPLICATION_NAME: "gatewayserver"
    depends_on:
      authservice:
        condition: service_healthy
      configserver:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-eureka-config



networks:
  ael:
    driver: "bridge"